#! This example takes a specified 'values.yaml' file and overlays it with new values for 'image.repository' and 'image.digest'

#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#! add all workload labels to the fixed values in this 
#! template as well for the stamped out configmap
#@ def merge_labels(fixed_values):
#@   labels = {}
#@   if hasattr(data.values.workload.metadata, "labels"):
#@     labels.update(data.values.workload.metadata.labels)
#@   end
#@   labels.update(fixed_values)
#@   return labels
#@ end

#@ files = data.list()

#! Return the specified file as a name string if it is found.
#@ def app_values_file():
#@  return data.list()[data.list().index("values.yaml")]   
#@ end

#! Take image name from image url, by delimitier '@'
#@ def image_url():
#@   tmp = data.values.image.image_ref.path
#@   return tmp.split("@")[0]
#@ end

#! Take image digest from image url, by delimitier '@'    
#@ def image_digest():
#@   tmp = data.values.image.image_ref.path
#@   return tmp.split("@")[1]
#@ end

#! Return the content of the specified file as a string.
#@ def old_values():
#@  return data.read(app_values_file())
#@ end

#! Construct a YAML fragment out of the old 'values.yaml' file, and overlay it with the new values.
#@ def overlay_values_file():
#@   return overlay.apply(yaml.decode(old_values()), values_overlay()[0])
#@ end

#! Overlay template 
#@ def values_overlay():
#@overlay/match by=overlay.all
---
image:
  #@overlay/match missing_ok=True
  repository: #@ image_url()
  #@overlay/match missing_ok=True
  digest: #@ image_digest()
#@ end
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-app-values-app".format(data.values.workload.metadata.name)
  labels: #@ merge_labels({ "app.kubernetes.io/component": "config" })
data: 
  values.yaml: #@ overlay_values_file()